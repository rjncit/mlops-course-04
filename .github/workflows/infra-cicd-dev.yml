name: Infrastructure CI/CD

on:
  pull_request:
    branches: [ "main" ]
    paths: 
      - 'mlops-course-04/terraform/**'
  workflow_dispatch:

jobs:
  terraform-plan-apply:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: mlops-course-04/terraform
    permissions:
      issues: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      - name: Terraform Init
        run: terraform init --backend-config='backends/dev.conf'

      - name: Verify ECR Image Exists
        run: |
          REPO_NAME="ecr-mlops-course-ehb-repository9129-dev"
          IMAGE_DETAILS=$(aws ecr describe-images \
            --repository-name $REPO_NAME \
            --query 'imageDetails[0]')
          
          if [ -z "$IMAGE_DETAILS" ] || [ "$IMAGE_DETAILS" == "null" ]; then
            echo "::error::ECR image not found in repository $REPO_NAME"
            exit 1
          fi
          echo "ECR image verified successfully"

      - name: Verify IAM Permissions
        run: |
          # Using fixed role name pattern that matches your TF code
          ROLE_NAME="ars-mlops-course-ehb-app9129-dev-iam-role"
          
          # Check if role exists
          if ! aws iam get-role --role-name $ROLE_NAME; then
            echo "::error::IAM role $ROLE_NAME not found"
            exit 1
          fi
          
          # Check attached policies
          echo "Attached policies:"
          aws iam list-attached-role-policies --role-name $ROLE_NAME
          
          # Check inline policies
          echo "Inline policies:"
          aws iam list-role-policies --role-name $ROLE_NAME

      - name: Terraform Format
        run: terraform fmt -check
        continue-on-error: true

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Plan
        run: terraform plan -no-color --var-file='environments/dev.tfvars' -out=plan.tfout
      
      - name: Approval
        uses: trstringer/manual-approval@v1
        timeout-minutes: 60
        with:
          secret: ${{ github.token }}
          approvers: rjncit
          issue-title: "Deploy Terraform Plan to dev"
          issue-body: "Please review the Terraform Plan"
          exclude-workflow-initiator-as-approver: false

      - name: Terraform Apply
        run: terraform apply -auto-approve plan.tfout